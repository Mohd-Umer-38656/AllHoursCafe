@model AllHoursCafe.API.Controllers.PaymentViewModel

@{
    ViewData["Title"] = "Payment";
}

<link rel="stylesheet" href="/css/payment.css" />

<section class="payment-section">
    <div class="container">
        <div class="payment-header">
            <h1>Payment</h1>
            <p>Complete your payment to confirm your order</p>
        </div>

        <div class="payment-content">
            <div class="payment-form-container">
                <form asp-action="Payment" asp-route-id="@Model.Order.Id" method="post" id="paymentForm" onsubmit="document.getElementById('completePaymentBtn').disabled = true; document.getElementById('completePaymentBtn').textContent = 'Processing...';">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    <div class="form-section">
                        <h2>Payment Method</h2>
                        <div class="payment-methods">
                            @foreach (var method in Model.PaymentMethods)
                            {
                                <div class="payment-method-option">
                                    <input type="radio" name="PaymentMethod" value="@method" id="@method.Replace(" ", "")" @(method == "Credit Card" ? "checked" : "") />
                                    <label for="@method.Replace(" ", "")">
                                        @switch (method)
                                        {
                                            case "Credit Card":
                                                <i class="fas fa-credit-card"></i>
                                                break;
                                            case "Debit Card":
                                                <i class="fas fa-credit-card"></i>
                                                break;
                                            case "UPI":
                                                <i class="fas fa-mobile-alt"></i>
                                                break;
                                            case "Cash on Delivery":
                                                <i class="fas fa-money-bill-wave"></i>
                                                break;
                                            default:
                                                <i class="fas fa-credit-card"></i>
                                                break;
                                        }
                                        <span>@method</span>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>

                    <div id="creditCardFields" class="payment-details">
                        <div class="form-section">
                            <h2>Card Details</h2>
                            <div class="form-group">
                                <label for="CardNumber" class="control-label">Card Number</label>
                                <input type="text" id="CardNumber" name="CardNumber" class="form-control" placeholder="1234 5678 9012 3456" />
                            </div>

                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label for="CardholderName" class="control-label">Cardholder Name</label>
                                    <input type="text" id="CardholderName" name="CardholderName" class="form-control" placeholder="Name on card" />
                                </div>

                                <div class="form-group col-md-3">
                                    <label for="ExpiryDate" class="control-label">Expiry Date</label>
                                    <input type="text" id="ExpiryDate" name="ExpiryDate" class="form-control" placeholder="MM/YY" />
                                </div>

                                <div class="form-group col-md-3">
                                    <label for="CVV" class="control-label">CVV</label>
                                    <input type="text" id="CVV" name="CVV" class="form-control" placeholder="123" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="upiFields" class="payment-details" style="display: none;">
                        <div class="form-section">
                            <h2>UPI Details</h2>
                            <div class="form-group">
                                <label for="UPIId" class="control-label">UPI ID</label>
                                <input type="text" id="UPIId" name="UPIId" class="form-control" placeholder="yourname@upi" />
                            </div>
                        </div>
                    </div>

                    <div id="cashOnDeliveryFields" class="payment-details" style="display: none;">
                        <div class="form-section">
                            <h2>Cash on Delivery</h2>
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle mr-2"></i>
                                <span>You will pay ₹@Model.Order.Total.ToString("F2") when your order is delivered.</span>
                            </div>
                            <div class="cod-info">
                                <i class="fas fa-money-bill-wave"></i>
                                <div>
                                    <p class="mb-1">Please keep exact change ready for a smooth delivery experience.</p>
                                    <p class="mb-0 text-muted">Our delivery partner will contact you before delivery.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <h2>Billing Address</h2>
                        <div class="billing-address">
                            <p><strong>@Model.Order.CustomerName</strong></p>
                            <p>@Model.Order.DeliveryAddress</p>
                            <p>@Model.Order.City, @Model.Order.State @Model.Order.PostalCode</p>
                            <p>Phone: @Model.Order.CustomerPhone</p>
                            <p>Email: @Model.Order.CustomerEmail</p>
                        </div>
                    </div>

                    <div class="payment-processing" id="paymentProcessing" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Processing payment...</span>
                        </div>
                        <p>Processing your payment. Please do not refresh the page...</p>
                    </div>

                    <div class="text-center mt-4">
                        <button type="submit" class="btn btn-primary" id="completePaymentBtn">
                            <i class="fas fa-lock mr-2"></i> Complete Payment
                        </button>
                        <a href="/Checkout" class="btn btn-secondary ml-2">
                            <i class="fas fa-arrow-left mr-2"></i> Back to Checkout
                        </a>
                    </div>

                    <!-- Hidden fields to ensure form submission works -->
                    <input type="hidden" name="Order.Id" value="@Model.Order.Id" />
                    <input type="hidden" name="Order.CustomerName" value="@Model.Order.CustomerName" />
                    <input type="hidden" name="Order.CustomerEmail" value="@Model.Order.CustomerEmail" />
                    <input type="hidden" name="Order.CustomerPhone" value="@Model.Order.CustomerPhone" />
                </form>
            </div>

            <div class="order-summary">
                <div class="order-summary-header">
                    <h2>Order Summary</h2>
                </div>

                <div class="order-details">
                    <div class="detail-row">
                        <span class="detail-label">Order Type:</span>
                        <span class="detail-value">@Model.Order.OrderType</span>
                    </div>

                    <div class="detail-row">
                        <span class="detail-label">Delivery Time:</span>
                        <span class="detail-value">@(Model.Order.DeliveryTime?.ToString("MMM dd, yyyy h:mm tt") ?? "As soon as possible")</span>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.Order.SpecialInstructions))
                    {
                        <div class="detail-row">
                            <span class="detail-label">Special Instructions:</span>
                            <span class="detail-value">@Model.Order.SpecialInstructions</span>
                        </div>
                    }
                </div>

                <div class="order-totals">
                    <div class="total-row">
                        <span>Subtotal</span>
                        <span>₹@Model.Order.SubTotal.ToString("F2")</span>
                    </div>
                    <div class="total-row">
                        <span>Tax (5%)</span>
                        <span>₹@Model.Order.Tax.ToString("F2")</span>
                    </div>
                    @if (Model.Order.DeliveryFee > 0)
                    {
                        <div class="total-row">
                            <span>Delivery Fee</span>
                            <span>₹@Model.Order.DeliveryFee.ToString("F2")</span>
                        </div>
                    }
                    <div class="total-row grand-total">
                        <span>Total</span>
                        <span>₹@Model.Order.Total.ToString("F2")</span>
                    </div>
                </div>

                <div class="payment-security">
                    <div class="security-icon">
                        <i class="fas fa-lock"></i>
                    </div>
                    <div class="security-text">
                        <h3>Secure Payment</h3>
                        <p>Your payment information is encrypted and secure. We never store your card details.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function() {
            // Handle payment method selection
            const paymentMethods = document.querySelectorAll('input[name="PaymentMethod"]');
            const creditCardFields = document.getElementById('creditCardFields');
            const upiFields = document.getElementById('upiFields');
            const cashOnDeliveryFields = document.getElementById('cashOnDeliveryFields');
            const paymentProcessing = document.getElementById('paymentProcessing');
            const completePaymentBtn = document.getElementById('completePaymentBtn');

            paymentMethods.forEach(method => {
                method.addEventListener('change', function() {
                    updatePaymentFields();
                    updateSubmitButton();
                });
            });

            function updatePaymentFields() {
                const selectedMethod = document.querySelector('input[name="PaymentMethod"]:checked').value;
                
                // Hide all payment fields first
                creditCardFields.style.display = 'none';
                upiFields.style.display = 'none';
                cashOnDeliveryFields.style.display = 'none';

                // Show the selected payment method fields
                if (selectedMethod === 'Credit Card' || selectedMethod === 'Debit Card') {
                    creditCardFields.style.display = 'block';
                } else if (selectedMethod === 'UPI') {
                    upiFields.style.display = 'block';
                } else if (selectedMethod === 'Cash on Delivery') {
                    cashOnDeliveryFields.style.display = 'block';
                }
            }

            function updateSubmitButton() {
                const selectedMethod = document.querySelector('input[name="PaymentMethod"]:checked').value;
                if (selectedMethod === 'Cash on Delivery') {
                    completePaymentBtn.innerHTML = '<i class="fas fa-check mr-2"></i> Confirm Order';
                } else {
                    completePaymentBtn.innerHTML = '<i class="fas fa-lock mr-2"></i> Complete Payment';
                }
            }

            // Initialize fields on page load
            updatePaymentFields();
            updateSubmitButton();

            // Enable jQuery validation
            $.validator.setDefaults({
                ignore: [],
                highlight: function(element) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function(element) {
                    $(element).removeClass('is-invalid');
                },
                errorElement: 'div',
                errorClass: 'invalid-feedback',
                errorPlacement: function(error, element) {
                    error.insertAfter(element);
                }
            });

            // Add custom validation rules
            $.validator.addMethod('creditcard', function(value, element) {
                // Simple validation - just check if it's 16 digits
                return this.optional(element) || /^\d{16}$/.test(value.replace(/\s/g, ''));
            }, 'Please enter a valid credit card number');

            $.validator.addMethod('expirydate', function(value, element) {
                // Check if it's in MM/YY format
                if (!/^\d{2}\/\d{2}$/.test(value)) return false;

                const [month, year] = value.split('/');
                const currentDate = new Date();
                const currentYear = currentDate.getFullYear() % 100; // Get last 2 digits
                const currentMonth = currentDate.getMonth() + 1; // 1-12

                // Check if the date is in the future
                if (parseInt(year) < currentYear) return false;
                if (parseInt(year) === currentYear && parseInt(month) < currentMonth) return false;
                if (parseInt(month) < 1 || parseInt(month) > 12) return false;

                return true;
            }, 'Please enter a valid expiry date (MM/YY)');

            $.validator.addMethod('cvv', function(value, element) {
                // Check if it's 3 or 4 digits
                return this.optional(element) || /^\d{3,4}$/.test(value);
            }, 'Please enter a valid CVV code');

            // Initialize form validation
            $('#paymentForm').validate({
                rules: {
                    CardNumber: {
                        required: function() {
                            const method = $('input[name="PaymentMethod"]:checked').val();
                            return method === 'Credit Card' || method === 'Debit Card';
                        },
                        creditcard: true
                    },
                    CardholderName: {
                        required: function() {
                            const method = $('input[name="PaymentMethod"]:checked').val();
                            return method === 'Credit Card' || method === 'Debit Card';
                        }
                    },
                    ExpiryDate: {
                        required: function() {
                            const method = $('input[name="PaymentMethod"]:checked').val();
                            return method === 'Credit Card' || method === 'Debit Card';
                        },
                        expirydate: true
                    },
                    CVV: {
                        required: function() {
                            const method = $('input[name="PaymentMethod"]:checked').val();
                            return method === 'Credit Card' || method === 'Debit Card';
                        },
                        cvv: true
                    },
                    UPIId: {
                        required: function() {
                            return $('input[name="PaymentMethod"]:checked').val() === 'UPI';
                        }
                    }
                },
                messages: {
                    CardNumber: {
                        required: 'Please enter your card number'
                    },
                    CardholderName: {
                        required: 'Please enter the cardholder name'
                    },
                    ExpiryDate: {
                        required: 'Please enter the expiry date'
                    },
                    CVV: {
                        required: 'Please enter the CVV code'
                    },
                    UPIId: {
                        required: 'Please enter your UPI ID'
                    }
                },
                submitHandler: function(form) {
                    // Show processing indicator
                    completePaymentBtn.disabled = true;
                    completePaymentBtn.textContent = 'Processing...';
                    paymentProcessing.style.display = 'block';

                    // Submit the form directly to ensure it works
                    setTimeout(function() {
                        form.submit();
                    }, 100);
                }
            });

            // Format credit card number with spaces
            $('#CardNumber').on('input', function() {
                let value = $(this).val().replace(/\s+/g, '');
                if (value.length > 0) {
                    value = value.match(new RegExp('.{1,4}', 'g')).join(' ');
                }
                $(this).val(value);
            });

            // Format expiry date with slash
            $('#ExpiryDate').on('input', function() {
                let value = $(this).val().replace(/\D/g, '');
                if (value.length > 2) {
                    value = value.substring(0, 2) + '/' + value.substring(2, 4);
                }
                $(this).val(value);
            });
        });
    </script>
}
